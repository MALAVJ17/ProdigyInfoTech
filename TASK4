import java.util.*;
public class SudokuSolver {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int[][] sudokuGrid = new int[9][9];
        System.out.println("Enter the unsolved Sudoku , where the blank space should have the value 0 :");
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                sudokuGrid[i][j]=sc.nextInt();
            }
            System.out.println();
        }
        System.out.println("Sudoku Puzzle Unsolved:");
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(sudokuGrid[i][j] + " ");
            }
            System.out.println();
        }
        if (solveSudoku(sudokuGrid)) {
            displaySudokuGrid(sudokuGrid);
        } else {
            System.out.println("No solution exists.");
        }
    }

    private static boolean solveSudoku(int[][] grid) {
        int[] emptyCell = findEmptyCell(grid);
        if (emptyCell == null) {
            // Puzzle solved
            return true;
        }

        int row = emptyCell[0];
        int col = emptyCell[1];

        for (int num = 1; num <= 9; num++) {
            if (isValidMove(grid, row, col, num)) {
                grid[row][col] = num;

                if (solveSudoku(grid)) {
                    return true;
                }

                // If placing num in the current cell doesn't lead to a solution, backtrack
                grid[row][col] = 0;
            }
        }

        // No number can be placed in the current cell
        return false;
    }

    private static int[] findEmptyCell(int[][] grid) {
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (grid[row][col] == 0) {
                    return new int[]{row, col};
                }
            }
        }
        return null; // No empty cell found
    }

    private static boolean isValidMove(int[][] grid, int row, int col, int num) {
        // Check if num is not in the same row and column
        for (int i = 0; i < 9; i++) {
            if (grid[row][i] == num || grid[i][col] == num) {
                return false;
            }
        }

        // Check if num is not in the same 3x3 box
        int boxStartRow = row - row % 3;
        int boxStartCol = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (grid[boxStartRow + i][boxStartCol + j] == num) {
                    return false;
                }
            }
        }

        return true;
    }

    private static void displaySudokuGrid(int[][] grid) {
        System.out.println("Sudoku Puzzle Solved:");
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(grid[i][j] + " ");
            }
            System.out.println();
        }
    }
}
